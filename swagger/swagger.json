{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/estado/": {
            "get": {
                "tags": [
                    "estado"
                ],
                "description": "get Estado",
                "operationId": "EstadoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Estado"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "estado"
                ],
                "description": "create Estado",
                "operationId": "EstadoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Estado content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Estado"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Estado"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/estado/{id}": {
            "get": {
                "tags": [
                    "estado"
                ],
                "description": "get Estado by id",
                "operationId": "EstadoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Estado"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "estado"
                ],
                "description": "update the Estado",
                "operationId": "EstadoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Estado content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Estado"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Estado"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "estado"
                ],
                "description": "delete the Estado",
                "operationId": "EstadoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/proyecto/": {
            "get": {
                "tags": [
                    "proyecto"
                ],
                "description": "get Proyecto",
                "operationId": "ProyectoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Proyecto"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "proyecto"
                ],
                "description": "create Proyecto",
                "operationId": "ProyectoController.Post",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Proyecto content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Proyecto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Proyecto"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/proyecto/completar/{id}": {
            "put": {
                "tags": [
                    "proyecto"
                ],
                "description": "update the Proyecto",
                "operationId": "ProyectoController.Put",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Proyecto"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            }
        },
        "/proyecto/{id}": {
            "put": {
                "tags": [
                    "proyecto"
                ],
                "description": "update the Proyecto",
                "operationId": "ProyectoController.Put",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Proyecto content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Proyecto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Proyecto"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "proyecto"
                ],
                "description": "delete the Proyecto",
                "operationId": "ProyectoController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/rol/": {
            "get": {
                "tags": [
                    "rol"
                ],
                "description": "get Rol",
                "operationId": "RolController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Rol"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "rol"
                ],
                "description": "create Rol",
                "operationId": "RolController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Rol content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Rol"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Rol"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/rol/{id}": {
            "get": {
                "tags": [
                    "rol"
                ],
                "description": "get Rol by id",
                "operationId": "RolController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Rol"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "rol"
                ],
                "description": "update the Rol",
                "operationId": "RolController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Rol content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Rol"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Rol"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "rol"
                ],
                "description": "delete the Rol",
                "operationId": "RolController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tarea/": {
            "get": {
                "tags": [
                    "tarea"
                ],
                "description": "get Tarea",
                "operationId": "TareaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Tarea"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tarea"
                ],
                "description": "create Tarea",
                "operationId": "TareaController.Post",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Tarea content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tarea"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Tarea"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tarea/{id}": {
            "get": {
                "tags": [
                    "tarea"
                ],
                "description": "get Tarea by id",
                "operationId": "TareaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Tarea"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tarea"
                ],
                "description": "update the Tarea",
                "operationId": "TareaController.Put",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Tarea content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tarea"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Tarea"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tarea"
                ],
                "description": "delete the Tarea",
                "operationId": "TareaController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/token/": {
            "post": {
                "tags": [
                    "token"
                ],
                "description": "Get token from user session",
                "operationId": "TokenController.getToken",
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The username for get token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for get token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} Obtain Token"
                    }
                }
            }
        },
        "/usuario/": {
            "get": {
                "tags": [
                    "usuario"
                ],
                "description": "Puede ver a los usuarios y su información, no requiere token, es para facilitar el uso de los usuarios",
                "operationId": "UsuarioController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Usuario"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "usuario"
                ],
                "description": "create Usuario",
                "operationId": "UsuarioController.Post",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Usuario content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Usuario"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Usuario"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/usuario/{password}/{passwordNew}": {
            "put": {
                "tags": [
                    "usuario"
                ],
                "description": "Permite cambiar la contraseña de un usuario un usuario",
                "operationId": "UsuarioController.CambiarContrasena",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "password",
                        "description": "El nombre de usuario a cambiar",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "passwordNew",
                        "description": "El nombre de usuario a cambiar",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            }
        },
        "/usuario/{username}/{activo}": {
            "put": {
                "tags": [
                    "usuario"
                ],
                "description": "Deshabilitar Usuario permite habilitar o inhabilitar un usuario",
                "operationId": "UsuarioController.DeshabilitarUsuario",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "username",
                        "description": "El nombre de usuario a cambiar",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "activo",
                        "description": "true para habiliar y false para deshabilitar",
                        "required": true,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Estado": {
            "title": "Estado",
            "type": "object",
            "properties": {
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                }
            }
        },
        "models.Proyecto": {
            "title": "Proyecto",
            "type": "object",
            "properties": {
                "Descripcion": {
                    "type": "string"
                },
                "FechaFinalizacion": {
                    "type": "string",
                    "format": "datetime"
                },
                "FechaInicio": {
                    "type": "string",
                    "format": "datetime"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdEstado": {
                    "$ref": "#/definitions/models.Estado"
                },
                "Nombre": {
                    "type": "string"
                }
            }
        },
        "models.Rol": {
            "title": "Rol",
            "type": "object",
            "properties": {
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                }
            }
        },
        "models.Tarea": {
            "title": "Tarea",
            "type": "object",
            "properties": {
                "Descripcion": {
                    "type": "string"
                },
                "FechaEjecucion": {
                    "type": "string",
                    "format": "datetime"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdEstado": {
                    "$ref": "#/definitions/models.Estado"
                },
                "IdProyecto": {
                    "$ref": "#/definitions/models.Proyecto"
                },
                "Nombre": {
                    "type": "string"
                }
            }
        },
        "models.Usuario": {
            "title": "Usuario",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "Contrasena": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdRol": {
                    "$ref": "#/definitions/models.Rol"
                },
                "Usuario": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "proyecto",
            "description": "ProyectoController operations for Proyecto\n"
        },
        {
            "name": "estado",
            "description": "EstadoController operations for Estado\n"
        },
        {
            "name": "tarea",
            "description": "TareaController operations for Tarea\n"
        },
        {
            "name": "rol",
            "description": "RolController operations for Rol\n"
        },
        {
            "name": "token",
            "description": "EstadoController operations for Estado\n"
        },
        {
            "name": "usuario",
            "description": "UsuarioController operations for Usuario\n"
        }
    ]
}